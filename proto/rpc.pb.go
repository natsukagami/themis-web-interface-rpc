// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	File
	Update
	Metadata
	Empty
	Key
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type File struct {
	Key      string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Checksum string `protobuf:"bytes,2,opt,name=checksum" json:"checksum,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	Content  []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *File) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *File) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *File) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *File) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Update struct {
	Type    string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Update) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Update) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Metadata struct {
	Key      string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Checksum string `protobuf:"bytes,2,opt,name=checksum" json:"checksum,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Metadata) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Metadata) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

type Empty struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Empty) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Key struct {
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	Client string `protobuf:"bytes,2,opt,name=client" json:"client,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Key) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *Key) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func init() {
	proto.RegisterType((*File)(nil), "File")
	proto.RegisterType((*Update)(nil), "Update")
	proto.RegisterType((*Metadata)(nil), "Metadata")
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Key)(nil), "Key")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPC service

type RPCClient interface {
	CreateKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Key, error)
	FetchUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (RPC_FetchUpdatesClient, error)
	SendFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*Metadata, error)
	DeleteFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*Empty, error)
	ReceiveFile(ctx context.Context, in *Metadata, opts ...grpc.CallOption) (*File, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) CreateKey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := grpc.Invoke(ctx, "/RPC/CreateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) FetchUpdates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (RPC_FetchUpdatesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RPC_serviceDesc.Streams[0], c.cc, "/RPC/FetchUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCFetchUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPC_FetchUpdatesClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type rPCFetchUpdatesClient struct {
	grpc.ClientStream
}

func (x *rPCFetchUpdatesClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCClient) SendFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*Metadata, error) {
	out := new(Metadata)
	err := grpc.Invoke(ctx, "/RPC/SendFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/RPC/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) ReceiveFile(ctx context.Context, in *Metadata, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := grpc.Invoke(ctx, "/RPC/ReceiveFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPC service

type RPCServer interface {
	CreateKey(context.Context, *Empty) (*Key, error)
	FetchUpdates(*Empty, RPC_FetchUpdatesServer) error
	SendFile(context.Context, *File) (*Metadata, error)
	DeleteFile(context.Context, *File) (*Empty, error)
	ReceiveFile(context.Context, *Metadata) (*File, error)
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_CreateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/CreateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateKey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_FetchUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCServer).FetchUpdates(m, &rPCFetchUpdatesServer{stream})
}

type RPC_FetchUpdatesServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type rPCFetchUpdatesServer struct {
	grpc.ServerStream
}

func (x *rPCFetchUpdatesServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func _RPC_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/SendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).SendFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DeleteFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_ReceiveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).ReceiveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RPC/ReceiveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).ReceiveFile(ctx, req.(*Metadata))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKey",
			Handler:    _RPC_CreateKey_Handler,
		},
		{
			MethodName: "SendFile",
			Handler:    _RPC_SendFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _RPC_DeleteFile_Handler,
		},
		{
			MethodName: "ReceiveFile",
			Handler:    _RPC_ReceiveFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchUpdates",
			Handler:       _RPC_FetchUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcb, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0x93, 0x3f, 0x69, 0xda, 0xcc, 0xdf, 0x05, 0xf2, 0x02, 0x85, 0x20, 0x50, 0x31, 0x9b,
	0xae, 0x22, 0x04, 0x02, 0xb1, 0x2f, 0x74, 0x53, 0x21, 0xa1, 0x20, 0x1e, 0xc0, 0xb8, 0x07, 0x1a,
	0x9a, 0x9b, 0x12, 0x53, 0x29, 0x8f, 0xc4, 0x5b, 0x22, 0xc7, 0x4e, 0x41, 0x62, 0xc5, 0xca, 0xf3,
	0xcd, 0x99, 0x8b, 0x8f, 0x4d, 0x61, 0x53, 0xcb, 0xa4, 0x6e, 0x2a, 0x55, 0xf1, 0x77, 0xf2, 0x97,
	0x59, 0x0e, 0x76, 0x40, 0xde, 0x16, 0x5d, 0xe4, 0xce, 0xdc, 0x79, 0x98, 0xea, 0x90, 0xc5, 0x34,
	0x91, 0x1b, 0xc8, 0x6d, 0xfb, 0x51, 0x44, 0xff, 0xfa, 0xf4, 0x9e, 0xb5, 0xf6, 0x9a, 0xe5, 0x28,
	0x45, 0x81, 0xc8, 0x33, 0xda, 0xc0, 0x2c, 0xa2, 0xb1, 0xac, 0x4a, 0x85, 0x52, 0x45, 0xfe, 0xcc,
	0x9d, 0x4f, 0xd3, 0x01, 0xf9, 0x0d, 0x05, 0xcf, 0xf5, 0x5a, 0x28, 0x30, 0x46, 0xbe, 0xea, 0x6a,
	0xd8, 0x75, 0x7d, 0xac, 0xfb, 0x0a, 0xb4, 0xad, 0x78, 0x83, 0x5d, 0x37, 0x20, 0xbf, 0xa5, 0xc9,
	0x03, 0x94, 0x58, 0x0b, 0x25, 0xfe, 0x76, 0x4f, 0x7e, 0x44, 0xa3, 0xfb, 0xa2, 0x56, 0xdd, 0xef,
	0x36, 0x7e, 0x4d, 0xde, 0x0a, 0x1d, 0x3b, 0xa4, 0xa0, 0x45, 0xb3, 0x43, 0x63, 0x35, 0x4b, 0x3a,
	0x2f, 0xf3, 0x4c, 0x9b, 0x30, 0x33, 0x2d, 0x5d, 0x7e, 0xba, 0xe4, 0xa5, 0x8f, 0x0b, 0x76, 0x4c,
	0xe1, 0xa2, 0x81, 0x50, 0xd0, 0x43, 0x82, 0xa4, 0xdf, 0x12, 0xfb, 0xc9, 0x0a, 0x1d, 0x77, 0xd8,
	0x39, 0x4d, 0x97, 0x50, 0x72, 0x63, 0xdc, 0xb6, 0x7b, 0x7d, 0x9c, 0x98, 0x0c, 0x77, 0x2e, 0x5c,
	0x76, 0x4a, 0x93, 0x27, 0x94, 0xeb, 0xfe, 0xf5, 0x47, 0x89, 0x3e, 0xe2, 0x30, 0x19, 0x7c, 0x72,
	0x87, 0x9d, 0x10, 0xdd, 0x21, 0x87, 0xc2, 0xcf, 0x0a, 0x3b, 0x89, 0x3b, 0xec, 0x8c, 0xfe, 0xa7,
	0x90, 0xc8, 0x76, 0x46, 0xff, 0x6e, 0x8d, 0x4d, 0x29, 0x77, 0x5e, 0x82, 0xfe, 0x8b, 0xaf, 0xbe,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x18, 0x19, 0x3d, 0x7a, 0xef, 0x01, 0x00, 0x00,
}
